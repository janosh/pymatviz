[project]
name = "pymatviz"
version = "0.15.1"
description = "A toolkit for visualizations in materials informatics"
authors = [{ name = "Janosh Riebesell", email = "janosh.riebesell@gmail.com" }]
readme = "readme.md"
license = { file = "license" }
keywords = [
    "chemistry",
    "data visualization",
    "materials discovery",
    "materials informatics",
    "matplotlib",
    "plotly",
    "science",
]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
urls = { Homepage = "https://github.com/janosh/pymatviz" }
requires-python = ">=3.10"
dependencies = [
    "matplotlib>=3.9",
    "numpy>=1.26",
    # output-formatting needed for pandas Stylers,
    # see https://github.com/pandas-dev/pandas/blob/-/pyproject.toml
    "moyopy[interface]>=0.4.1",
    "pandas[output-formatting]>=2.2",
    "plotly>=5.23",
    "pymatgen>=2025.2.18",
    "scikit-learn>=1.5",
    "scipy>=1.14",
]

[project.optional-dependencies]
auto-text-pos = ["adjustText>=0.8"]
df-pdf-export = ["pdfCropMargins>=2", "weasyprint>=60"]
df-svg-export = ["bs4>=0.0.2", "cssutils>=2.9", "lxml>=4.9"]
# https://github.com/plotly/Kaleido/issues/176
pdf-export = ["kaleido>=0.2.1"]
make-assets = ["matminer>=0.9"]
gh-pages = ["jupyter>=1.1", "lazydocs>=0.4", "nbconvert>=7.16"]
test = [
    "phonopy>=2.31",                                                              # only needed if user passes in phonopy objects
    "pymatviz[auto-text-pos, df-pdf-export, df-svg-export, pdf-export, cluster]",
    "pytest-cov>=6",
    "pytest-split>=0.9",
    "pytest>=8",
]
brillouin = ["seekpath>=2.1"]
cluster = ["matminer>=0.9"]
# umap-learn not included in cluster because its numba dep clashes with other packages
umap = ["umap-learn>=0.5"]

[tool.setuptools.packages.find]
include = ["pymatviz*"]

[tool.setuptools.package-data]
pymatviz = ["*.csv", "*.yml"]

[build-system]
requires = ["setuptools>=71"]
build-backend = "setuptools.build_meta"

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-p no:warnings"

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true
no_implicit_optional = false

[tool.ruff]
target-version = "py310"
output-format = "concise"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN401",  # Any-type
    "C408",    # unnecessary-collection-call
    "C901",    # complex-structure
    "COM812",  # trailing comma missing
    "D205",    # 1 blank line required between summary line and description
    "E731",    # do not assign a lambda expression, use a def
    "EM101",   # raw-string-in-exception
    "EM102",   # f-string-in-exception
    "ERA001",  # dead code
    "FIX002",  # line-contains-todo
    "PLR0911", # too-many-return-statements
    "PLR0912", # too-many-branches
    "PLR0913", # function-with-too-many-arguments
    "PLR0915", # too-many-statements
    "PLR2004", # magic-number-comparison
    "PTH",     # prefer pathlib over os.path
    "S108",    # Probable insecure usage of temporary file or directory
    "SIM105",  # Use contextlib.suppress instead of try-except-pass
    "SLF001",  # Access private class members
    "TD",      # TODO related
    "TRY003",  # raise-vanilla-args
]
pydocstyle.convention = "google"
isort.lines-after-imports = 2
isort.split-on-trailing-comma = false
pep8-naming.ignore-names = ["E_kin", "E_pot", "E_tot", "kT"]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"] # unused-import
"tests/*" = [
    "D",       # pydocstyle
    "FBT001",  # boolean-type-hint-positional-argument
    "FBT002",  # boolean-default-value-positional-argument
    "INP001",  # implicit-namespace-package
    "PLR2004", # magic-value-comparison
    "S101",    # use of assert
]
"examples/*" = [
    "D100",   # missing docstring in public module
    "INP001", # implicit-namespace-package
    "T201",   # print found
]
"assets/scripts/*" = [
    "D100",   # missing docstring in public module
    "INP001", # implicit-namespace-package
    "T201",   # print found
]
"site/*" = [
    "D",      # pydocstyle
    "INP001", # implicit-namespace-package
    "S602",   # subprocess-popen-with-shell-equals-true
]

[tool.pyright]
typeCheckingMode = "off"
reportPossiblyUnboundVariable = true
reportUnboundVariable = true
